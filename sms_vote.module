<?php

/**
 * @file
 * Implements an SMS based voting system.
 *
 */

/**
 * Implements hook_init().
 */
function sms_vote_init() {
  // Make sure that we have this js on the page.
  drupal_add_js(drupal_get_path('module', 'sms_vote') . '/js/sms_vote.js');
}

/**
 * Helper function to add some js needed for the modal windows.
 */
function sms_vote_modal_add_js() {
  static $added;
  if (!isset($added)) {
    $added = TRUE;
    drupal_add_js(drupal_get_path('module', 'sms_vote') . '/js/sms_vote.modal.js');
  }
}

/**
 * Returns the sms vote settings, optional for a specific node type.
 *
 * @param string $type
 *  Optionsl, a node type for which to return the settings.
 */
function sms_vote_get_settings() {
  $defaults = array('max_points' => 4, 'code_digits' => 4, 'max_fails' => 3, 'special_number' => '', 'enable_cart' => FALSE, 'force_distribute_all' => FALSE, 'activate_ajax' => TRUE,
                    'ajax_settings' => array('show_success_in_modal' => TRUE, 'close_automatically' => TRUE, 'close_automatically_seconds' => 3));
  return variable_get('sms_vote_settings', $defaults);
}

/**
 * Helper function to check if the cart is enabled for the voting system.
 */
function sms_vote_is_cart_enabled() {
  $sms_settings = sms_vote_get_settings();
  return $sms_settings['enable_cart'];
}

/**
 * Implements hook_entity_info().
 */
function sms_vote_entity_info() {
  // If we need to improve the performance inside the controllers, we can extend
  // them with our classes.
  $entities['sms_vote'] = array(
    'label' => t('SMS Vote'),
    'controller class' => 'SMSVoteEntityController',
    'base table' => 'sms_vote',
    'access callback' => 'sms_vote_vote_access',
    'entity keys' => array(
      'id' => 'svid',
    ),
  );
  $entities['sms_vote_points'] = array(
    'label' => t('SMS Vote Points'),
    'controller class' => 'EntityAPIController',
    'base table' => 'sms_vote_points',
    'access callback' => 'sms_vote_vote_points_access',
    'entity keys' => array(
      'id' => 'svpid',
    ),
  );
  return $entities;
}

/**
 * Access callback for vote entities.
 */
function sms_vote_vote_access($op, $entity = NULL, $account = NULL, $entity_type) {
  // The votes do not have any view or update operations. Also, the deletion
  // can be done only of the user has a special permission.
  if ($op == 'create') {
    return TRUE;
  }
  elseif ($op == 'delete' && user_access('delete votes', $account)) {
    return TRUE;
  }
  // In any other case, default to false.
  return FALSE;
}

/**
 * Access callback for vote points entities.
 */
function sms_vote_vote_points_access($op, $entity = NULL, $account = NULL, $entity_type) {
  // At the moment, it is the same implementation as for votes.
  return sms_vote_vote_access($op, $entity, $account, $entity_type);
}

/**
 * Implements hook_permission().
 */
function sms_vote_permission() {
  return array(
    'administer sms vote' => array(
      'title' => t('Administer SMS Vote'),
      'restrict access' => TRUE,
    ),

    // This is used for the moment only in the vote
    'delete votes' => array(
      'title' => t('Delete votes'),
      'restrict access' => TRUE,
      'warning' => t('IMPORTANT: Give to trusted roles only; this permission has security implications. The only use case when votes should be deleted is when the maximum number of fails has been reached for a valid phone number.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function sms_vote_theme() {
  return array(
    'sms_vote_checkout_review' => array(
      'variables' => array('votes' => array()),
      'template' => 'templates/sms_vote_checkout_review',
     ),
  );
}

/**
 * Implements hook_menu().
 */
function sms_vote_menu() {
  $items['sms_vote/checkout/%ctools_js'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'sms_vote_checkout_page',
    'page arguments' => array(2),
    'title' => 'Votes checkout',
    'file' => 'sms_vote.checkout.inc'
  );
  $items['sms_vote/%node/%ctools_js'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'sms_vote_vote_page',
    'page arguments' => array(1, 2),
    'title' => 'Vote',
    'file' => 'sms_vote.pages.inc',
  );
  $items['sms_vote/cancel/%node/%ctools_js'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'sms_vote_vote_cancel_page',
    'page arguments' => array(2, 3),
    'title' => 'Cancel Vote',
    'file' => 'sms_vote.pages.inc',
  );
  $items['admin/config/system/sms_vote'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'SMS Vote',
    'access arguments' => array('administer sms vote'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_vote_admin'),
    'file' => 'sms_vote.admin.inc'
  );
  $items['admin/config/system/sms_vote/settings'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'SMS Vote Settings',
    'access arguments' => array('administer sms vote'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_vote_admin'),
    'file' => 'sms_vote.admin.inc'
  );
  $items['admin/config/system/sms_vote/codes'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Predefined Codes',
    'access arguments' => array('administer sms vote'),
    'page callback' => 'sms_vote_admin_predefined_codes',
    'file' => 'sms_vote.admin.inc'
  );
  $items['sms_vote/code/status/%/%sms_vote_predefined_code'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer sms vote'),
    'page callback' => 'sms_vote_code_status_change',
    'page arguments' => array(3,4,5),
    'file' => 'sms_vote.admin.inc',
  );
  $items['admin/config/system/sms_vote/rounds'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Voting rounds',
    'access arguments' => array('administer sms vote'),
    'page callback' => 'sms_vote_admin_voting_rounds',
    'file' => 'sms_vote.admin.inc'
  );
  $items['admin/config/system/sms_vote/rounds/%sms_vote_round/edit'] = array(
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Edit round',
    'access arguments' => array('administer sms vote'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_vote_admin_round_add_edit_form', 5),
    'file' => 'sms_vote.admin.inc'
  );
  $items['admin/config/system/sms_vote/rounds/%sms_vote_round/activate'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Activate round',
    'access arguments' => array('administer sms vote'),
    'page callback' => 'sms_vote_admin_round_activate_round',
    'page arguments' => array(5),
    'file' => 'sms_vote.admin.inc'
  );
  return $items;
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 *
 * Attention: this is NOT a form alter, it is a hook provided by the vbo module.
 */
function sms_vote_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // Remove the delete action if the user does not have access to it.
  if ($vbo->view->name == 'votes') {
    if (!empty($form['select']['operation']['#options']['action::views_bulk_operations_delete_item']) && !user_access('delete votes')) {
      unset($form['select']['operation']['#options']['action::views_bulk_operations_delete_item']);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function sms_vote_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_api().
 */
function sms_vote_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sms_vote') . '/includes/views',
  );
}

/**
 * Implements hook_sms_vote_points_insert().
 */
function sms_vote_sms_vote_points_insert($vote_points_entity) {
  // We register a shutdown function to when calculating the votes to be sure
  // that we also take into consideration the current changes. Otherwise, the
  // total points number will not be calculated using the current points.
  $vote_entity = entity_load_single('sms_vote', $vote_points_entity->svid);
  drupal_register_shutdown_function('sms_vote_update_total_points_for_rounds', $vote_points_entity->nid, array($vote_entity->round_id));
}

/**
 * Implements hook_sms_vote_points_update().
 */
function sms_vote_sms_vote_points_update($vote_points_entity) {
  // For the moment, just call the insert hook.
  sms_vote_sms_vote_points_insert($vote_points_entity);
}

/**
 * Implements hook_sms_vote_points_delete().
 */
function sms_vote_sms_vote_points_delete($vote_points_entity) {
  // The vote to which this entity is assigned may be deleted already, so in
  // this case we just update the total points for all the rounds. In the
  // insert and update hooks, because we are sure that the vote exists, we can
  // update the points only for one specific round.
  drupal_register_shutdown_function('sms_vote_update_total_points_for_rounds', $vote_points_entity->nid);
}

/**
 * Implements hook_sms_vote_delete().
 */
function sms_vote_sms_vote_delete($vote_entity) {
  // Delete all the vote points entities attached to it.
  $query = db_select('sms_vote_points', 'svp')->fields('svp', array('svpid'))->condition('svp.svid', $vote_entity->svid);
  $ids = $query->execute()->fetchAllKeyed(0, 0);
  if (!empty($ids)) {
    entity_delete_multiple('sms_vote_points', $ids);
  }
}

/**
 * Preprocess function for the sms_vote_checkout_review theme().
 */
function sms_vote_preprocess_sms_vote_checkout_review(&$vars) {
  $storage = SMSVoteTmpStorageFactory::getStorage();
  $vars['votes'] = $storage->getAllPoints();
  foreach ($vars['votes'] as $nid => $points) {
    $vars['votes'][$nid] = array('points' => $points, 'node' => node_load($nid));
  }
}

/**
 * Loads a predefined code by its id.
 *
 * @param int $cid
 *  The id of the code.
 */
function sms_vote_predefined_code_load($cid) {
  return SMSVotePredefinedCodes::loadPredefinedCode($cid);
}

/**
 * Loads a voting round by its id.
 *
 * @param int $round_id
 *  The round id.
 */
function sms_vote_round_load($round_id) {
  return db_select('sms_vote_rounds', 'svr')->fields('svr')->condition('svr.svrid', $round_id)->execute()->fetch();
}

/**
 * Loads all the rounds.
 */
function sms_vote_round_load_all() {
  return db_select('sms_vote_rounds', 'svr')->fields('svr')->orderBy('svr.svrid')->execute()->fetchAll();
}

/**
 * Saves a voting round.
 *
 * @param object $voting_round
 *  An object that maps over the {sms_vote_rounds} table.
 */
function sms_vote_round_save($voting_round) {
  $primary_keys = array();
  if (!empty($voting_round->svrid)) {
    $primary_keys[] = 'svrid';
  }
  drupal_write_record('sms_vote_rounds', $voting_round, $primary_keys);
}

/**
 * Returns the total points for a node id.
 *
 * @param int $nid
 *  The node id.
 *
 * @param int $round_id
 *  Optional, the round id.
 */
function sms_vote_get_total_points_for_nid($nid, $round_id = NULL) {
  $query = db_select('sms_vote_points', 'svp');
  $query->addExpression('SUM(svp.points)', 'total_points');
  $query->innerJoin('sms_vote', 'sv', 'sv.svid = svp.svid');
  $query->condition('svp.nid', $nid)->condition('sv.status', 1);
  if (!empty($round_id)) {
    $query->condition('sv.round_id', $round_id);
  }
  $result = $query->execute()->fetch();
  if (!empty($result->total_points)) {
    return $result->total_points;
  }
  return 0;
}

/**
 * Updates the total points for a node id and a set of rounds.
 *
 * @param int $nid
 *  The node id.
 *
 * @param arary $round_ids
 *  An array of round ids. Optional, if empty, all the rounds in the system will
 *  be used.
 */
function sms_vote_update_total_points_for_rounds($nid, $round_ids = array()) {
  // If the round_ids array is empty, we consider all the rounds in the system.
  if (empty($round_ids)) {
    $rounds = sms_vote_round_load_all();
    foreach ($rounds as $round) {
      $round_ids[] = $round->svrid;
    }
  }

  foreach ($round_ids as $round_id) {
    db_delete('sms_vote_total_points')->condition('nid', $nid)->condition('round_id', $round_id)->execute();
    $points = sms_vote_get_total_points_for_nid($nid, $round_id);
    if (!empty($points)) {
      db_insert('sms_vote_total_points')->fields(array('nid' => $nid, 'points' => $points, 'round_id' => $round_id))->execute();
    }
  }
  // @todo: If we will attach the points on the entity load, then we need to
  // clear the entity cache here.
}

/**
 * Returns an array with valid codes for a vote entity.
 *
 * The predefined codes are always valid codes. In addition, if the phone number
 * is not the special number, then a valid code is also the one that was
 * generated for the vote, obviously.
 *
 * @param object $vote_entity
 *  A Vote Entity object.
 */
function sms_vote_get_valid_codes_for_vote($vote_entity) {
  $valid_codes = array();
  $codes = SMSVotePredefinedCodes::loadPredefinedCodes();
  foreach ($codes as $code) {
    // @todo: We could enhance this so that only the codes which are reserved
    // are valid.
    $valid_codes[] = $code->code;
  }

  // If the phone is not the special one, then a valid code is also the code
  // that was generated specially for it.
  if (!sms_vote_is_special_number_phone($vote_entity->phone)) {
    $valid_codes[] = $vote_entity->code;
  }
  return $valid_codes;
}

/**
 * Checks if a phone matches the special phone number for the predefined codes.
 *
 * @param string $phone
 *  A phone number to match.
 */
function sms_vote_is_special_number_phone($phone) {
  $sms_vote_settings = sms_vote_get_settings();
  $special_number = $sms_vote_settings['special_number'];
  if (!empty($special_number) && $phone == $special_number) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks if a phone is valid and if yes it returns the phone in the
 * internation form.
 *
 * @param string $phone
 */
function sms_vote_normalize_phone($phone) {
  // If this is the special phone, we do not validate it.
   if (sms_vote_is_special_number_phone($phone))  {
    return $phone;
  }
  // If the phone contains only digits, we must ensure that it has exactly 10
  // and it starts with 0. This is the case for 07xxxxxxxx
  if (ctype_digit($phone) && strlen($phone) == 10 && substr($phone, 0, 1) == '0') {
    // In this case we also replace the '0' in the beginning with +41.
    // @todo: we do not really need this, but this could also be a setting. We
    // will always most probably use this inside Switzerland.
    $phone = substr_replace($phone, '+41', 0, 1);
    return $phone;
  }
  // The other possibility would be that the phone starts with '+' and has at
  // least 10 digits, so it uses the international format.
  if (substr($phone, 0, 1) == '+' && strlen($phone) > 10 && ctype_digit(substr($phone, 1))) {
    // In this case, the phone is valid, and we want to store it like that so no
    // need to change.
    return $phone;
  }
  // If we are here, the phone is not valid, so just return FALSE.
  return FALSE;
}

/**
 * Returns the formatted message for the SMS that contains the code.
 *
 * @param string $code
 *  The code to be sent.
 */
function sms_vote_format_sms_message($code) {
  return t('Your SMS-code for voting on !site_name: !code', array('!site_name' => variable_get('site_name'), '!code' => $code));
}

/**
 * Vote widget for a set of nodes that can be placed on a form.
 *
 * @param array $nodes
 *  An array with node objects.
 */
function sms_vote_widget($nodes) {
  $storage = SMSVoteTmpStorageFactory::getStorage();
  $remove_points_title = t('Remove points');
  $form = array();
  $sms_settings = sms_vote_get_settings();
  $is_cart_enabled = sms_vote_is_cart_enabled();
  foreach ($nodes as $node) {
    // If the cart is enabled, then the maximum points we can give should be
    // calculated by the storage. Otherwise, we use the site setting.
    $max_points_for_node = $is_cart_enabled ? $storage->getAvailablePointsForNode($node->nid) : $sms_settings['max_points'];
    // We show the widget only if we can add points for the node.
    if (!empty($max_points_for_node)) {
      $nids[] = $node->nid;
      $current_points = $storage->getPoints($node->nid);
      $form['vote_' . $node->nid] = array(
        '#type' => 'select',
        '#id' => 'vote-widget-' . time() . rand(1000, 99999),
        '#options' => drupal_map_assoc(range(1, $max_points_for_node)),
        '#title' => l($node->title, 'node/' . $node->nid, array('html' => TRUE)),
        '#default_value' => !empty($current_points) ? $current_points : 1,
        '#prefix' => !empty($current_points) ? '<div class="voting-choice">' : '',
        '#suffix' => !empty($current_points) ? '<div class="cancel-vote">' . sms_vote_l($remove_points_title, 'sms_vote/cancel/' . $node->nid . '/nojs', array('ui' => 'ajax', 'query' => drupal_get_destination())) . '</div></div>' : ''
      );
    }
  }
  if (!empty($nids)) {
    $form['nids'] = array(
      '#type' => 'value',
      '#value' => $nids,
    );
  }
  return $form;
}

/**
 * Helper function that returns an array of ajax commands to dismiss the modal
 * and show the messages in the page.
 */
function sms_vote_commands_dismiss_modal_and_show_messages() {
  $commands = array();
  ctools_include('modal');
  $sms_vote_settings = sms_vote_get_settings();
  // If we do not want to show the messages in the modal window, then we just
  // dismiss the window and prepend the messages to the body.
  if (empty($sms_vote_settings['ajax_settings']['show_success_in_modal'])) {
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ajax_command_remove('div.messages');
    $commands[] = ajax_command_prepend('body', theme('status_messages'));
  }
  else {
    $commands[] = ajax_command_html('#modal-content', theme('status_messages'));
    // Check if we should close the window after some seconds.
    if (!empty($sms_vote_settings['ajax_settings']['close_automatically'])) {
      $millisecods = $sms_vote_settings['ajax_settings']['close_automatically_seconds'] * 1000;
      $commands[] = sms_vote_command_delayed_modal_dismiss($millisecods);
    }
  }
  return $commands;
}

/**
 * Helper function to show a link on the page.
 *
 * In the $options array it can get a paramter: 'ui' which can be: 'modal' or
 * 'ajax'. If any of these, and the ajax setting is enabled, it will use the
 * ctools ajax or modal features. Otherwise, it will just print the normal link
 *
 * All the parameters have the same meaning as for l(), but it is important to
 * know that if the link will be created with ctools, the $options will not be
 * used.
 */
function sms_vote_l($title, $path, $options = array()) {
  if (!empty($options['ui'])) {
    if ($options['ui'] == 'modal' || $options['ui'] == 'ajax') {
      $sms_vote_settings = sms_vote_get_settings();
      if (!empty($sms_vote_settings['activate_ajax'])) {
        ctools_include('ajax');
        if ($options['ui'] == 'modal') {
          ctools_include('modal');
          ctools_modal_add_js();
          sms_vote_modal_add_js();
          return ctools_modal_text_button($title, $path, $title);
        }
        else {
          return ctools_ajax_text_button($title, $path, $title);
        }
      }
    }
  }
  // By default, return a normal link.
  return l($title, $path, $options);
}

/**
 * Returns a command to dismiss a modal window with a delay.
 *
 * @param int $delay
 *   The number of millisecods after which to dismiss the modal window.
 */
function sms_vote_command_delayed_modal_dismiss($delay) {
  return array(
    'command' => 'delayed_modal_dismiss',
    'delay' => $delay,
  );
}
